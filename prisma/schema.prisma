// schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model CfgMarcas {
  id       Int       @id @default(autoincrement())
  marca    String
  keywords String?   // Representa tinytext
  foto     String?   // Representa tinytext
  activo   Boolean   @default(true)
  // Relación: Una marca tiene muchos productos
  Producto Productos[]
}

model CfgRubros {
  id         Int       @id @default(autoincrement())
  rubro      String
  condiciones String?  
  keywords   String?
  foto       String?
  activo     Boolean   @default(true)
  // Relación: Un rubro tiene muchos productos
  Producto Productos[]
}

model CfgFormasPagos {
  id             Int     @id @default(autoincrement())
  forma_pago     String
  descripcion    String
  permite_cuotas Boolean @default(false)
  activo         Boolean @default(true)
}

model CfgMonedas {
  id         Int       @id @default(autoincrement())
  moneda     String
  moneda_des String
  activo     Boolean   @default(true)
  // Relación: Una moneda puede ser usada por muchos productos
  Producto Productos[]
}

model CfgSlider {
  id     Int    @id @default(autoincrement())
  titulo String
  thumbs String?  // Representa tinytext
  foto   String
  orden  Int    @default(5)
  activo Boolean @default(true)
}

model Productos {
  id          Int                      @id @default(autoincrement())
  marca_id    Int
  rubro_id    Int
  moneda_id   Int
  producto    String
  descripcion String?
  foto        String?                  // Imagen principal
  precio      Decimal                  @db.Decimal(10, 2)
  stock       Int                      @default(0)
  destacado   Boolean                  @default(false)
  activo      Boolean                  @default(true)
  visitas     Int                      @default(0)

  // Relaciones
  marca    CfgMarcas  @relation(fields: [marca_id], references: [id])
  rubro    CfgRubros  @relation(fields: [rubro_id], references: [id])
  moneda   CfgMonedas @relation(fields: [moneda_id], references: [id])
  fotos    ProductoFotos[]
  versiones ProductoVersiones[]
  especificaciones ProductoEspecificaciones[]
}

model ProductoFotos {
  id          Int      @id @default(autoincrement())
  producto_id Int
  epigrafe    String
  foto        String
  orden       Int      @default(1)
  activo      Boolean  @default(true)

  producto Productos @relation(fields: [producto_id], references: [id])
}

model ProductoVersiones {
  id          Int      @id @default(autoincrement())
  producto_id Int
  version     String
  detalle     String?  // Podés usarlo para almacenar descripción o algún detalle adicional
  orden       Int      @default(5)
  activo      Boolean  @default(true)

  producto Productos @relation(fields: [producto_id], references: [id])
}

model ProductoEspecificaciones {
  id               Int      @id @default(autoincrement())
  producto_id      Int
  categoria        String    // Ej: "Nutrientes", "Ingredientes", etc.
  especificaciones String
  orden            Int       @default(1)
  activo           Boolean   @default(true)

  producto Productos @relation(fields: [producto_id], references: [id])
}

model Pedidos {
  id                     Int      @id @default(autoincrement())
  datos                  Json
  total                  Decimal  @db.Decimal(10, 2)
  estado                 String   @default("pendiente")
  metodo_pago            String
  comprador_nombre       String
  comprador_email        String
  comprador_telefono     String?
  direccion_envio        String?
  mp_payment_id          String?
  transferencia_ref      String?
  tarjeta_last4          String?
  tarjeta_payment_method String?
}
