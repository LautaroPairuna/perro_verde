// schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model CfgMarcas {
  id       Int       @id @default(autoincrement())
  marca    String
  keywords String?   // tinytext
  foto     String?   // tinytext
  activo   Boolean   @default(true)

  Producto Productos[]

  @@map("cfgmarcas")
}

model CfgRubros {
  id          Int       @id @default(autoincrement())
  rubro       String
  condiciones String?
  keywords    String?
  foto        String?
  activo      Boolean   @default(true)

  Producto Productos[]

  @@map("cfgrubros")
}

model CfgFormasPagos {
  id             Int     @id @default(autoincrement())
  forma_pago     String
  descripcion    String
  permite_cuotas Boolean @default(false)
  activo         Boolean @default(true)

  @@map("cfgformaspagos")
}

model CfgMonedas {
  id         Int     @id @default(autoincrement())
  moneda     String
  moneda_des String
  activo     Boolean @default(true)

  Producto Productos[]

  @@map("cfgmonedas")
}

model CfgSlider {
  id     Int     @id @default(autoincrement())
  titulo String
  thumbs String? // tinytext
  foto   String
  orden  Int     @default(5)
  activo Boolean @default(true)

  @@map("cfgslider")
}

model Productos {
  id          Int                      @id @default(autoincrement())
  marca_id    Int
  rubro_id    Int
  moneda_id   Int
  producto    String
  descripcion String?
  foto        String?
  precio      Decimal                  @db.Decimal(10, 2)
  stock       Int      @default(0)
  destacado   Boolean  @default(false)
  activo      Boolean  @default(true)
  visitas     Int      @default(0)

  marca          CfgMarcas   @relation(fields: [marca_id], references: [id])
  rubro          CfgRubros   @relation(fields: [rubro_id], references: [id])
  moneda         CfgMonedas  @relation(fields: [moneda_id], references: [id])
  fotos          ProductoFotos[]
  versiones      ProductoVersiones[]
  especificaciones ProductoEspecificaciones[]

  @@map("productos")
}

model ProductoFotos {
  id          Int      @id @default(autoincrement())
  producto_id Int
  epigrafe    String
  foto        String
  orden       Int      @default(1)
  activo      Boolean  @default(true)

  producto Productos @relation(fields: [producto_id], references: [id])

  @@map("productofotos")
}

model ProductoVersiones {
  id          Int     @id @default(autoincrement())
  producto_id Int
  version     String
  detalle     String? // null â†’ ''
  orden       Int     @default(5)
  activo      Boolean @default(true)

  producto Productos @relation(fields: [producto_id], references: [id])

  @@map("productoversiones")
}

model ProductoEspecificaciones {
  id                Int      @id @default(autoincrement())
  producto_id       Int
  categoria         String
  especificaciones  String
  orden             Int     @default(1)
  activo            Boolean @default(true)

  producto Productos @relation(fields: [producto_id], references: [id])

  @@map("productoespecificaciones")
}

model Pedidos {
  id                     Int     @id @default(autoincrement())
  datos                  Json
  total                  Decimal @db.Decimal(10, 2)
  estado                 String  @default("pendiente")
  metodo_pago            String
  comprador_nombre       String
  comprador_email        String
  comprador_telefono     String?
  direccion_envio        String?
  mp_payment_id          String?
  transferencia_ref      String?
  tarjeta_last4          String?
  tarjeta_payment_method String?

  @@map("pedidos")
}
